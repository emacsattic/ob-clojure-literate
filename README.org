#+TITLE: ob-clojure-literate

* Features

** use default session

#+begin_src org
,#+begin_src clojure :session "*cider-repl ob-clojure*" :results output
(prn *ns*)
,#+end_src

,#+RESULTS:
: #namespace[user]
#+end_src

** specify session

You can specify session for current clojure src block with =[C-c C-v M-s]= /
~ob-clojure-literate-specify-session-header-argument~.

#+begin_src org
,#+begin_src clojure :session "*cider-repl <PROJECT>*" :results output
(prn *ns*)
,#+end_src

,#+RESULTS:
: #namespace[user]
#+end_src

** support initiate session with =[C-c C-v z]= like other languages

#+begin_src clojure :session "*cider-repl ob-clojure*" :var name="stardiviner"
(prn "hello, " name)
#+end_src

This is supposed to be implemented in ~ob-clojure.el~ by default.
It will great if ~ob-clojure.el~ want to merge this code.

** TODO let org-babel-edit-src special buffer connect to correct CIDER REPL to get completion
:LOGBOOK:
- State "TODO"       from              [2018-01-07 Sun 11:10]
:END:

** TODO support header argument :dir
:LOGBOOK:
- State "TODO"       from              [2018-01-07 Sun 11:10]
:END:

** TODO support generating plot in working directory or :dir specified directory
:LOGBOOK:
- State "TODO"       from              [2018-01-07 Sun 11:10]
:END:


* Installation

** use-package

#+begin_src emacs-lisp
(use-package ob-clojure-literate
  :ensure t
  :after org
  :init
  (setq ob-clojure-literate-auto-jackin-p t)
  (add-hook 'org-mode-hook #'ob-clojure-literate-mode)
  )
#+end_src


* Motivation

I like Emacs Org-mode "Literate Programming" very much. It's a kind of paradigm.
I can apply this idea on many places. Now Clojure is my favourite programming
language. I hope to combine them together. But ~ob-clojure~ does not suitable for
Literate Programming very much like other language babel (like Python) supports.

_This README is totally written in Org-mode Literate Programming._

So I decide to solve this problem in my way.


* Usage

** workflow

1. 


* Test

** use default session

1. Enable ~ob-clojure-literate-mode~.

   #+begin_src emacs-lisp
   (ob-clojure-literate-mode 1)
   #+end_src

2. define a variable in CIDER REPL.

   Go to CIDER REPL then type in src_clojure{(def my-name "stardiviner")} 

3. print the value defined in CIDER REPL.

   #+begin_src clojure
   (prn my-name)
   #+end_src

   #+RESULTS:
   : "stardiviner"

   The result should be "~stardiviner~".

4. Then disable ~ob-clojure-literate-mode~.

   #+begin_src emacs-lisp
   (ob-clojure-literate-mode -1)
   #+end_src

   #+RESULTS:

5. Then try to print that variable again.

   #+begin_src clojure
   (prn my-name)
   #+end_src

** initiate session

1. make sure you don't have following session initiated yet.

   #+begin_src clojure :session "*cider-repl ob-clojure*" :var name="stardiviner"
   (prn "hello, " name)
   #+end_src

2. Put your point on upper src block then initiate session with =[C-c C-v z]=.


* Theory

** This package workflow

*** auto start an CIDER REPL for ob-clojure

1. First, create a plain Clojure project with Leiningen to used for ob-clojure.

   #+begin_src shell :dir "~/.emacs.d/Org-mode/"
   lein new ob-clojure
   #+end_src

2. Then auto start CIDER REPL session in this plain Clojure project.

   1. Set ob-clojure default header arguments to a static session name:

      #+begin_src emacs-lisp
      (add-to-list 'org-babel-default-header-args:clojure
                   '(:session . "*cider-repl ob-clojure*"))
      #+end_src

   2. open a file in project to prepare for CIDER jack-in.

      #+begin_src emacs-lisp
      (progn
        (find-file (expand-file-name "~/.emacs.d/Org-mode/ob-clojure/src/ob_clojure/core.clj"))
        (cider-jack-in))
      #+end_src

3. To fix ~org-babel-execute:clojure~ has a line ~(cider-current-ns)~ which will
   invoke ~(cider-find-ns)~. The ~(cider-find-ns)~ will try to extract Clojure
   namespace from current buffer.

   This will cause a problem, like in following org-mode file content:

   #+begin_src org
   ,* test results output

   ,#+BEGIN_SRC clojure :result output
   (println "hi")
   (println (str *ns*))
   ,#+END_SRC

   When I execute first src block [C-c C-c], it will find namespace and
   return wrong namespace ~kk~ in second src block. This is not a
   expected behavior.

   ,* different namespace

   ,#+BEGIN_SRC clojure :result output
   (in-ns 'kk)
   (println (str *ns*))
   ,#+END_SRC
   #+end_src

   In order to fix this problem, I asked a lot of places, and try many methods.

   Finally I found the variable ~cider-buffer-ns~ (which in function
   ~cider-current-ns~) docstring description.

   #+begin_example
   Current Clojure namespace of some buffer.

   Useful for special buffers (e.g. REPL, doc buffers) that have to
   keep track of a namespace.

   This should never be set in Clojure buffers, as there the namespace
   should be extracted from the buffer's ns form.
   #+end_example

   Then I come up an idea:

   - should I include org-mode as special for CIDER ~cider-buffer-ns~?
     - It is ~nil~ in Clojure buffer.
     - It is "~user~" in ~cider-repl ob-clojure~ session.
     - Maybe I should use elisp code to manually set this ~ns~ to ~user~.

4. So the final solution source code is:

   #+begin_src emacs-lisp
   ;; auto start CIDER REPL session in a complete Leiningen project environment for Org-mode Babel by jack-in.
   (add-to-list 'org-babel-default-header-args:clojure
                '(:session . "*cider-repl ob-clojure*"))

   (progn
     (find-file (expand-file-name "~/.emacs.d/Org-mode/ob-clojure/src/ob_clojure/core.clj"))
     (cider-jack-in))

   (defun ob-clojure-cider-do-not-find-ns ()
     "Fix the issue that `cider-current-ns' try to invoke `clojure-find-ns' to extract ns from buffer."
     (setq-local cider-buffer-ns "user"))
   (add-hook 'org-mode-hook #'ob-clojure-cider-do-not-find-ns)
   #+end_src

   But the function ~ob-clojure-cider-don-not-find-ns~ can be smarter:

   How to execute elisp code in a specific buffer without actually switching to
   it? I can writing a function get a buffer local variable in a specific (regex
   matched) buffer.

   #+begin_src emacs-lisp
   (defun ob-clojure-cider-do-not-find-ns ()
     "Fix the issue that `cider-current-ns' try to invoke `clojure-find-ns' to extract ns from buffer."
     (with-current-buffer "*cider-repl ob-clojure*"
       (defvar ob-clojure-cider-repl-ns cider-buffer-ns)
       (setq-local cider-buffer-ns ob-clojure-cider-repl-ns)))
   #+end_src
